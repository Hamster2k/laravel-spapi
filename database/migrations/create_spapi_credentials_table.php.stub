<?php

use HighsideLabs\LaravelSpApi\SellingPartnerApi;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateSpApiCredentialsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up(): void
    {
        Schema::create('spapi_credentials', function (Blueprint $table) {
            $table->id();
            $table->timestamps();

            /*
             * The Selling Partner ID/Merchant ID. This is returned in the OAuth response from Amazon when
             * authorizing a new seller on an SP API application. If self-authorizing an application, log
             * into Seller Central and go to the URL below to find the account's Selling Partner ID. Replace
             * <regional-seller-central-url> with your region's Seller Central domain, e.g. sellercentral.amazon.com,
             * sellercentral-europe.amazon.com, etc:
             *
             * https://<regional-seller-central-domain>/sw/AccountInfo/MerchantToken/step/MerchantToken
             */
            $table->string('selling_partner_id')->unique();

            // The SP API region that these credentials are for
            $table->enum('region', SellingPartnerApi::REGIONS);

            // The app credentials that the the refresh token was created with
            $table->string('client_id');
            $table->string('client_secret');
            // The LWA refresh token for this set of credentials
            $table->string('refresh_token', 511);

            // The seller these credentials are associated with
            $table->foreignId('seller_id')->constrained('spapi_sellers');

            // If SP API calls will only be happening with a single set of AWS credentials (meaning
            // all the credentials are authorized on the same application), these columns will be
            // skipped. Otherwise, they are needed to specify the AWS keys for each set of credentials.
            if (config('spapi.aws.dynamic')) {
                $table->string('access_key_id');
                $table->string('secret_access_key');
                $table->string('role_arn')->nullable();
            }
        });

    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down(): void
    {
        Schema::drop('spapi_credentials');
    }
}
